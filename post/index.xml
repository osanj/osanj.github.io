<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Just a Notepad</title>
    <link>https://osanj.github.io/post/</link>
    <description>Recent content in Posts on Just a Notepad</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 02 Apr 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://osanj.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Efficient Triangle Intersection in 3D Scences</title>
      <link>https://osanj.github.io/post/efficient-triangle-intersection/</link>
      <pubDate>Tue, 02 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://osanj.github.io/post/efficient-triangle-intersection/</guid>
      <description>&lt;p&gt;Building a rendering engine comes with a lot of hurdles. One of the problems that might pop out of nowhere (depending on your preparation) is handling meshes.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using Spring Dynamics ODE for Animation Interpolation (Rebuilding Facebook Rebound)</title>
      <link>https://osanj.github.io/post/spring-dynamics-interpolation/</link>
      <pubDate>Sat, 03 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://osanj.github.io/post/spring-dynamics-interpolation/</guid>
      <description>Rebound is an open-source project by Facebook. It is used to control the course of animations. In case you are familiar with Android, you might know that Android provides several Interpolator classes (AccelerateInterpolator, DecelerateInterpolator, ...) to handle that task. While most of these provide a rather simple course of animation, Facebook&#39;s Rebound is based on spring dynamics which is not trivial to implement. This article describes my attempt to reverse engineer the Rebound library.</description>
    </item>
    
    <item>
      <title>Visualizing Sphere Integrals</title>
      <link>https://osanj.github.io/post/visualizing-sphere-integrals/</link>
      <pubDate>Tue, 18 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://osanj.github.io/post/visualizing-sphere-integrals/</guid>
      <description>&lt;p&gt;You know that feeling when you have been using some rule blindly forever and one day you finally spend the time to figure out where this rule comes from? Below is my effort to visualize the integrals which lead to the formulas for surface area and volume of spheres.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>