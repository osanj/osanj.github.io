<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on Just a Notepad</title>
    <link>https://osanj.github.io/tags/java/</link>
    <description>Recent content in java on Just a Notepad</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 21 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://osanj.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Quick and Dirty Gradle Task for Android Projects Using Swig</title>
      <link>https://osanj.github.io/post/gradle-swig-task-for-android/</link>
      <pubDate>Sun, 21 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://osanj.github.io/post/gradle-swig-task-for-android/</guid>
      <description>&lt;p&gt;Swig is really great to wrap native projects. I have been working on wrapping native code in an Android app, figuring out how to run swig as part of the gradle build pipeline took me way too many google queries.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using Spring Dynamics ODE for Animation Interpolation (Rebuilding Facebook Rebound)</title>
      <link>https://osanj.github.io/post/spring-dynamics-interpolation/</link>
      <pubDate>Sat, 03 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://osanj.github.io/post/spring-dynamics-interpolation/</guid>
      <description>Rebound is an open-source project by Facebook. It is used to control the course of animations. In case you are familiar with Android, you might know that Android provides several Interpolator classes (AccelerateInterpolator, DecelerateInterpolator, ...) to handle that task. While most of these provide a rather simple course of animation, Facebook&#39;s Rebound is based on spring dynamics which is not trivial to implement. This article describes my attempt to reverse engineer the Rebound library.</description>
    </item>
    
  </channel>
</rss>
