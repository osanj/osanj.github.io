<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>math on Just a Notepad</title>
    <link>https://osanj.github.io/tags/math/</link>
    <description>Recent content in math on Just a Notepad</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 18 Jul 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://osanj.github.io/tags/math/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How Denormal Floats Slow Down ML Inference</title>
      <link>https://osanj.github.io/post/how-denormal-floats-slow-down-inference/</link>
      <pubDate>Tue, 18 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://osanj.github.io/post/how-denormal-floats-slow-down-inference/</guid>
      <description>&lt;p&gt;Recently when converting a PyTorch checkpoint for CPU inference with ONNX throughput fell off a cliff. Of course, runtime on CPU is generally expected to be slower than on GPU, however something was off. Turns out a particular case of floating values was to blame.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A Simple Method for Finding Multiple Lines in a Hough Space</title>
      <link>https://osanj.github.io/post/simple-multi-line-detection-in-hough-space/</link>
      <pubDate>Thu, 29 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://osanj.github.io/post/simple-multi-line-detection-in-hough-space/</guid>
      <description>&lt;p&gt;Detecting the longest line in an Hough accumulator is easy, however detecting multiple lines is a more annoying problem.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Probability of a MRZ Checksum Failure</title>
      <link>https://osanj.github.io/post/mrz-checksum-failure-analysis/</link>
      <pubDate>Tue, 26 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://osanj.github.io/post/mrz-checksum-failure-analysis/</guid>
      <description>&lt;p&gt;The machine readable zone (MRZ) of identity documents has various checksums which are intended to verify that a readout by a machine is actually correct. But how likely is it that this mechanism fails?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Notes on Homographies</title>
      <link>https://osanj.github.io/post/notes-on-homographies/</link>
      <pubDate>Mon, 27 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://osanj.github.io/post/notes-on-homographies/</guid>
      <description>&lt;p&gt;This is writeup of some formulas that proved to be helpful understanding and working with homographies.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Efficient Triangle Intersection in 3D Scences</title>
      <link>https://osanj.github.io/post/efficient-triangle-intersection/</link>
      <pubDate>Tue, 02 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://osanj.github.io/post/efficient-triangle-intersection/</guid>
      <description>&lt;p&gt;Building a rendering engine comes with a lot of hurdles. One of the problems that might pop out of nowhere (depending on your preparation) is handling meshes.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using Spring Dynamics ODE for Animation Interpolation (Rebuilding Facebook Rebound)</title>
      <link>https://osanj.github.io/post/spring-dynamics-interpolation/</link>
      <pubDate>Sat, 03 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://osanj.github.io/post/spring-dynamics-interpolation/</guid>
      <description>Rebound is an open-source project by Facebook. It is used to control the course of animations. In case you are familiar with Android, you might know that Android provides several Interpolator classes (AccelerateInterpolator, DecelerateInterpolator, &amp;hellip;) to handle that task. While most of these provide a rather simple course of animation, Facebook&amp;rsquo;s Rebound is based on spring dynamics which is not trivial to implement. This article describes my attempt to reverse engineer the Rebound library.</description>
    </item>
    
    <item>
      <title>Visualizing Sphere Integrals</title>
      <link>https://osanj.github.io/post/visualizing-sphere-integrals/</link>
      <pubDate>Tue, 18 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://osanj.github.io/post/visualizing-sphere-integrals/</guid>
      <description>&lt;p&gt;You know that feeling when you have been using some rule blindly forever and one day you finally spend the time to figure out where this rule comes from? Below is my effort to visualize the integrals which lead to the formulas for surface area and volume of spheres.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
