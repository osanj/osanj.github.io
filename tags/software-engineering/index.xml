<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>software engineering on Just a Notepad</title>
    <link>https://osanj.github.io/tags/software-engineering/</link>
    <description>Recent content in software engineering on Just a Notepad</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 07 Apr 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://osanj.github.io/tags/software-engineering/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Build Numbers are the Better Release Candidates</title>
      <link>https://osanj.github.io/post/buildnrs-are-better-rcs/</link>
      <pubDate>Sun, 07 Apr 2024 00:00:00 +0000</pubDate>
      
      <guid>https://osanj.github.io/post/buildnrs-are-better-rcs/</guid>
      <description>&lt;p&gt;Releasing a new version of a web application or larger software project usually involves some sort of build-deploy-test-fix cycle until it passes QA. A common approach is to have release candidates, however this implies re-building the last RC with the final tag which can be avoided with build numbers.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How Denormal Floats Slow Down ML Inference</title>
      <link>https://osanj.github.io/post/how-denormal-floats-slow-down-inference/</link>
      <pubDate>Tue, 18 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://osanj.github.io/post/how-denormal-floats-slow-down-inference/</guid>
      <description>&lt;p&gt;Recently when converting a PyTorch checkpoint for CPU inference with ONNX throughput fell off a cliff. Of course, runtime on CPU is generally expected to be slower than on GPU, however something was off. Turns out a particular case of floating values was to blame.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How to Efficiently Retrieve Video Frames from MinIO using pyAV</title>
      <link>https://osanj.github.io/post/video-frames-from-remote-files/</link>
      <pubDate>Fri, 18 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://osanj.github.io/post/video-frames-from-remote-files/</guid>
      <description>&lt;p&gt;A video is made up of frames, but retrieving a specific frame from a video file is not straight forward. What if the video file is stored remotely?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Just Put all Your Sh!t in Docker Images üêã</title>
      <link>https://osanj.github.io/post/dockerize-everything/</link>
      <pubDate>Sun, 06 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://osanj.github.io/post/dockerize-everything/</guid>
      <description>&lt;p&gt;Docker is awesome. It is even more awesome if you embrace it. So why stop at using it for production images?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Quick and Dirty Gradle Task for Android Projects Using Swig</title>
      <link>https://osanj.github.io/post/gradle-swig-task-for-android/</link>
      <pubDate>Sun, 21 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://osanj.github.io/post/gradle-swig-task-for-android/</guid>
      <description>&lt;p&gt;Swig is really great to wrap native projects. I have been working on wrapping native code in an Android app, figuring out how to run swig as part of the gradle build pipeline took me way too many google queries.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Efficient Triangle Intersection in 3D Scences</title>
      <link>https://osanj.github.io/post/efficient-triangle-intersection/</link>
      <pubDate>Tue, 02 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://osanj.github.io/post/efficient-triangle-intersection/</guid>
      <description>&lt;p&gt;Building a rendering engine comes with a lot of hurdles. One of the problems that might pop out of nowhere (depending on your preparation) is handling meshes.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using Spring Dynamics ODE for Animation Interpolation (Rebuilding Facebook Rebound)</title>
      <link>https://osanj.github.io/post/spring-dynamics-interpolation/</link>
      <pubDate>Sat, 03 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://osanj.github.io/post/spring-dynamics-interpolation/</guid>
      <description>Rebound is an open-source project by Facebook. It is used to control the course of animations. In case you are familiar with Android, you might know that Android provides several Interpolator classes (AccelerateInterpolator, DecelerateInterpolator, &amp;hellip;) to handle that task. While most of these provide a rather simple course of animation, Facebook&amp;rsquo;s Rebound is based on spring dynamics which is not trivial to implement. This article describes my attempt to reverse engineer the Rebound library.</description>
    </item>
    
  </channel>
</rss>
